/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package impl

import (
	"context"
	"fmt"
	"github.com/nanikjava/cdsenergy/v1/storage"
	"net/http"
	"runtime"

	gofakeit "github.com/brianvoe/gofakeit/v6"
	pkg "github.com/nanikjava/cdsenergy/v1/pkg/pkg"
)

type APIService struct {
	b *storage.RedisBackend
}

func NewAPIService(backend *storage.RedisBackend) *APIService {
	return &APIService{b: backend}
}

// GetAccount - Get Energy Account Detail
func (s *APIService) GetAccount(ctx context.Context, accountId string, xV string, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	r := &pkg.EnergyAccountDetailResponseV4{}
	err := gofakeit.Struct(&r)

	if err != nil {
		return returnValue(getCurrentFunctionName())
	}

	c, err := s.b.Client.Get(context.TODO(), "test").Result()
	if err != nil {
		return pkg.Response(500, c), nil
	}

	r.Data.DisplayName = c

	return pkg.Response(200, r), nil

}

// GetBalanceForAccount - Get Balance For Energy Account
func (s *APIService) GetBalanceForAccount(ctx context.Context, accountId string, xV string, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	r := &pkg.EnergyBalanceResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil

}

// GetBillingForAccount - Get Billing For Account
func (s *APIService) GetBillingForAccount(ctx context.Context, accountId string, xV string, newestTime string, oldestTime string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyBillingListResponseV3{}), nil
	r := &pkg.EnergyBillingListResponseV3{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// GetConcessions - Get Concessions
func (s *APIService) GetConcessions(ctx context.Context, accountId string, xV string, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyConcessionsResponse{}), nil
	r := &pkg.EnergyConcessionsResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// GetDERForServicePoint - Get DER For Service Point
func (s *APIService) GetDERForServicePoint(ctx context.Context, servicePointId string, xV string, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyDerDetailResponse{}), nil
	r := &pkg.EnergyDerDetailResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// GetInvoicesForAccount - Get Invoices For Account
func (s *APIService) GetInvoicesForAccount(ctx context.Context, accountId string, xV string, newestDate string, oldestDate string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyInvoiceListResponse{}), nil
	r := &pkg.EnergyInvoiceListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// GetPaymentSchedule - Get Agreed Payment Schedule
func (s *APIService) GetPaymentSchedule(ctx context.Context, accountId string, xV string, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyPaymentScheduleResponse{}), nil
	r := &pkg.EnergyPaymentScheduleResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// GetPlan - Get Generic Plan Detail
func (s *APIService) GetPlan(ctx context.Context, planId string, xV string, xMinV string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyPlanResponseV3{}), nil
	r := &pkg.EnergyPlanResponseV3{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// GetServicePoint - Get Service Point Detail
func (s *APIService) GetServicePoint(ctx context.Context, servicePointId string, xV string, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyServicePointDetailResponse{}), nil
	r := &pkg.EnergyServicePointDetailResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// GetUsageForServicePoint - Get Usage For Service Point
func (s *APIService) GetUsageForServicePoint(ctx context.Context, servicePointId string, xV string, oldestDate string, newestDate string, intervalReads pkg.IntervalRead, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyUsageListResponse{}), nil
	r := &pkg.EnergyUsageListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListAccounts - Get Energy Accounts
func (s *APIService) ListAccounts(ctx context.Context, xV string, openStatus pkg.State, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyAccountListResponseV2{}), nil
	r := &pkg.EnergyAccountListResponseV2{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListBalancesBulk - Get Bulk Balances for Energy
func (s *APIService) ListBalancesBulk(ctx context.Context, xV string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyBalanceListResponse{}), nil
	r := &pkg.EnergyBalanceListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListBalancesForAccounts - Get Balances For Specific Energy Accounts
func (s *APIService) ListBalancesForAccounts(ctx context.Context, xV string, requestAccountIdList pkg.RequestAccountIdList, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyBalanceListResponse{}), nil
	r := &pkg.EnergyBalanceListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListBillingBulk - Get Bulk Billing
func (s *APIService) ListBillingBulk(ctx context.Context, xV string, newestTime string, oldestTime string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyBillingListResponseV3{}), nil
	r := &pkg.EnergyBillingListResponseV3{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListBillingForAccounts - Get Billing For Specific Accounts
func (s *APIService) ListBillingForAccounts(ctx context.Context, xV string, requestAccountIdList pkg.RequestAccountIdList, newestTime string, oldestTime string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyBillingListResponseV3{}), nil
	r := &pkg.EnergyBillingListResponseV3{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListDERBulk - Get Bulk DER
func (s *APIService) ListDERBulk(ctx context.Context, xV string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyDerListResponse{}), nil
	r := &pkg.EnergyDerListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListDERForServicePoints - Get DER For Specific Service Points
func (s *APIService) ListDERForServicePoints(ctx context.Context, xV string, requestServicePointIdList pkg.RequestServicePointIdList, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyDerListResponse{}), nil
	r := &pkg.EnergyDerListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListInvoicesBulk - Get Bulk Invoices
func (s *APIService) ListInvoicesBulk(ctx context.Context, xV string, newestDate string, oldestDate string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyInvoiceListResponse{}), nil
	r := &pkg.EnergyInvoiceListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListInvoicesForAccounts - Get Invoices For Specific Accounts
func (s *APIService) ListInvoicesForAccounts(ctx context.Context, xV string, requestAccountIdList pkg.RequestAccountIdList, newestDate string, oldestDate string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyInvoiceListResponse{}), nil
	r := &pkg.EnergyInvoiceListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListPlans - Get Generic Plans
func (s *APIService) ListPlans(ctx context.Context, xV string, type_ pkg.ListPlanType, fuelType pkg.FuelType, effective pkg.Effective, updatedSince string, brand string, page int32, pageSize int32, xMinV string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyPlanListResponse{}), nil
	r := &pkg.EnergyPlanListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListServicePoints - Get Service Points
func (s *APIService) ListServicePoints(ctx context.Context, xV string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyServicePointListResponse{}), nil
	r := &pkg.EnergyServicePointListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListUsageBulk - Get Bulk Usage
func (s *APIService) ListUsageBulk(ctx context.Context, xV string, intervalReads pkg.IntervalRead, oldestDate string, newestDate string, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyUsageListResponse{}), nil
	r := &pkg.EnergyUsageListResponse{}
	err := gofakeit.Struct(&r)

	if err != nil {
		// return pkg.Response(406, pkg.ResponseErrorListV2{}), nil
		return returnValue(getCurrentFunctionName())
	}

	return pkg.Response(200, r), nil
}

// ListUsageForServicePoints - Get Usage For Specific Service Points
func (s *APIService) ListUsageForServicePoints(ctx context.Context, xV string, requestServicePointIdList pkg.RequestServicePointIdList, oldestDate string, newestDate string, intervalReads pkg.IntervalRead, page int32, pageSize int32, xMinV string, xFapiInteractionId string, xFapiAuthDate string, xFapiCustomerIpAddress string, xCdsClientHeaders string) (pkg.ImplResponse, error) {
	// return Response(200, EnergyUsageListResponse{}), nil
	return returnValue(getCurrentFunctionName())
}

func getCurrentFunctionName() string {
	pc, _, _, _ := runtime.Caller(1)
	return runtime.FuncForPC(pc).Name()
}

func returnValue(functionName string) (pkg.ImplResponse, error) {
	return pkg.Response(http.StatusNotImplemented, nil), fmt.Errorf("%s method not implemented", functionName)
}
