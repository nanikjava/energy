// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"GetAccount": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/{accountId}",
			c.GetAccount,
		},
		"GetBalanceForAccount": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/{accountId}/balance",
			c.GetBalanceForAccount,
		},
		"GetBillingForAccount": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/{accountId}/billing",
			c.GetBillingForAccount,
		},
		"GetConcessions": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/{accountId}/concessions",
			c.GetConcessions,
		},
		"GetDERForServicePoint": Route{
			strings.ToUpper("Get"),
			"/energy/electricity/servicepoints/{servicePointId}/der",
			c.GetDERForServicePoint,
		},
		"GetInvoicesForAccount": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/{accountId}/invoices",
			c.GetInvoicesForAccount,
		},
		"GetPaymentSchedule": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/{accountId}/payment-schedule",
			c.GetPaymentSchedule,
		},
		"GetPlan": Route{
			strings.ToUpper("Get"),
			"/energy/plans/{planId}",
			c.GetPlan,
		},
		"GetServicePoint": Route{
			strings.ToUpper("Get"),
			"/energy/electricity/servicepoints/{servicePointId}",
			c.GetServicePoint,
		},
		"GetUsageForServicePoint": Route{
			strings.ToUpper("Get"),
			"/energy/electricity/servicepoints/{servicePointId}/usage",
			c.GetUsageForServicePoint,
		},
		"ListAccounts": Route{
			strings.ToUpper("Get"),
			"/energy/accounts",
			c.ListAccounts,
		},
		"ListBalancesBulk": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/balances",
			c.ListBalancesBulk,
		},
		"ListBalancesForAccounts": Route{
			strings.ToUpper("Post"),
			"/energy/accounts/balances",
			c.ListBalancesForAccounts,
		},
		"ListBillingBulk": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/billing",
			c.ListBillingBulk,
		},
		"ListBillingForAccounts": Route{
			strings.ToUpper("Post"),
			"/energy/accounts/billing",
			c.ListBillingForAccounts,
		},
		"ListDERBulk": Route{
			strings.ToUpper("Get"),
			"/energy/electricity/servicepoints/der",
			c.ListDERBulk,
		},
		"ListDERForServicePoints": Route{
			strings.ToUpper("Post"),
			"/energy/electricity/servicepoints/der",
			c.ListDERForServicePoints,
		},
		"ListInvoicesBulk": Route{
			strings.ToUpper("Get"),
			"/energy/accounts/invoices",
			c.ListInvoicesBulk,
		},
		"ListInvoicesForAccounts": Route{
			strings.ToUpper("Post"),
			"/energy/accounts/invoices",
			c.ListInvoicesForAccounts,
		},
		"ListPlans": Route{
			strings.ToUpper("Get"),
			"/energy/plans",
			c.ListPlans,
		},
		"ListServicePoints": Route{
			strings.ToUpper("Get"),
			"/energy/electricity/servicepoints",
			c.ListServicePoints,
		},
		"ListUsageBulk": Route{
			strings.ToUpper("Get"),
			"/energy/electricity/servicepoints/usage",
			c.ListUsageBulk,
		},
		"ListUsageForServicePoints": Route{
			strings.ToUpper("Post"),
			"/energy/electricity/servicepoints/usage",
			c.ListUsageForServicePoints,
		},
	}
}

// GetAccount - Get Energy Account Detail
func (c *DefaultAPIController) GetAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetAccount(r.Context(), accountIdParam, xVParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBalanceForAccount - Get Balance For Energy Account
func (c *DefaultAPIController) GetBalanceForAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetBalanceForAccount(r.Context(), accountIdParam, xVParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBillingForAccount - Get Billing For Account
func (c *DefaultAPIController) GetBillingForAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var newestTimeParam string
	if query.Has("newest-time") {
		param := query.Get("newest-time")

		newestTimeParam = param
	} else {
	}
	var oldestTimeParam string
	if query.Has("oldest-time") {
		param := query.Get("oldest-time")

		oldestTimeParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetBillingForAccount(r.Context(), accountIdParam, xVParam, newestTimeParam, oldestTimeParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetConcessions - Get Concessions
func (c *DefaultAPIController) GetConcessions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetConcessions(r.Context(), accountIdParam, xVParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDERForServicePoint - Get DER For Service Point
func (c *DefaultAPIController) GetDERForServicePoint(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	servicePointIdParam := params["servicePointId"]
	if servicePointIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"servicePointId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetDERForServicePoint(r.Context(), servicePointIdParam, xVParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInvoicesForAccount - Get Invoices For Account
func (c *DefaultAPIController) GetInvoicesForAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var newestDateParam string
	if query.Has("newest-date") {
		param := query.Get("newest-date")

		newestDateParam = param
	} else {
	}
	var oldestDateParam string
	if query.Has("oldest-date") {
		param := query.Get("oldest-date")

		oldestDateParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetInvoicesForAccount(r.Context(), accountIdParam, xVParam, newestDateParam, oldestDateParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPaymentSchedule - Get Agreed Payment Schedule
func (c *DefaultAPIController) GetPaymentSchedule(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountIdParam := params["accountId"]
	if accountIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetPaymentSchedule(r.Context(), accountIdParam, xVParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlan - Get Generic Plan Detail
func (c *DefaultAPIController) GetPlan(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	planIdParam := params["planId"]
	if planIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"planId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	xMinVParam := r.Header.Get("x-min-v")
	result, err := c.service.GetPlan(r.Context(), planIdParam, xVParam, xMinVParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetServicePoint - Get Service Point Detail
func (c *DefaultAPIController) GetServicePoint(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	servicePointIdParam := params["servicePointId"]
	if servicePointIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"servicePointId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetServicePoint(r.Context(), servicePointIdParam, xVParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUsageForServicePoint - Get Usage For Service Point
func (c *DefaultAPIController) GetUsageForServicePoint(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	servicePointIdParam := params["servicePointId"]
	if servicePointIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"servicePointId"}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var oldestDateParam string
	if query.Has("oldest-date") {
		param := query.Get("oldest-date")

		oldestDateParam = param
	} else {
	}
	var newestDateParam string
	if query.Has("newest-date") {
		param := query.Get("newest-date")

		newestDateParam = param
	} else {
	}
	var intervalReadsParam IntervalRead
	if query.Has("interval-reads") {
		param := IntervalRead(query.Get("interval-reads"))

		intervalReadsParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.GetUsageForServicePoint(r.Context(), servicePointIdParam, xVParam, oldestDateParam, newestDateParam, intervalReadsParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListAccounts - Get Energy Accounts
func (c *DefaultAPIController) ListAccounts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var openStatusParam State
	if query.Has("open-status") {
		param := State(query.Get("open-status"))

		openStatusParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListAccounts(r.Context(), xVParam, openStatusParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListBalancesBulk - Get Bulk Balances for Energy
func (c *DefaultAPIController) ListBalancesBulk(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListBalancesBulk(r.Context(), xVParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListBalancesForAccounts - Get Balances For Specific Energy Accounts
func (c *DefaultAPIController) ListBalancesForAccounts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	requestAccountIdListParam := RequestAccountIdList{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestAccountIdListRequired(requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRequestAccountIdListConstraints(requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListBalancesForAccounts(r.Context(), xVParam, requestAccountIdListParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListBillingBulk - Get Bulk Billing
func (c *DefaultAPIController) ListBillingBulk(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var newestTimeParam string
	if query.Has("newest-time") {
		param := query.Get("newest-time")

		newestTimeParam = param
	} else {
	}
	var oldestTimeParam string
	if query.Has("oldest-time") {
		param := query.Get("oldest-time")

		oldestTimeParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListBillingBulk(r.Context(), xVParam, newestTimeParam, oldestTimeParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListBillingForAccounts - Get Billing For Specific Accounts
func (c *DefaultAPIController) ListBillingForAccounts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	requestAccountIdListParam := RequestAccountIdList{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestAccountIdListRequired(requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRequestAccountIdListConstraints(requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var newestTimeParam string
	if query.Has("newest-time") {
		param := query.Get("newest-time")

		newestTimeParam = param
	} else {
	}
	var oldestTimeParam string
	if query.Has("oldest-time") {
		param := query.Get("oldest-time")

		oldestTimeParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListBillingForAccounts(r.Context(), xVParam, requestAccountIdListParam, newestTimeParam, oldestTimeParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListDERBulk - Get Bulk DER
func (c *DefaultAPIController) ListDERBulk(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListDERBulk(r.Context(), xVParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListDERForServicePoints - Get DER For Specific Service Points
func (c *DefaultAPIController) ListDERForServicePoints(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	requestServicePointIdListParam := RequestServicePointIdList{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestServicePointIdListParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestServicePointIdListRequired(requestServicePointIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRequestServicePointIdListConstraints(requestServicePointIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListDERForServicePoints(r.Context(), xVParam, requestServicePointIdListParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListInvoicesBulk - Get Bulk Invoices
func (c *DefaultAPIController) ListInvoicesBulk(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var newestDateParam string
	if query.Has("newest-date") {
		param := query.Get("newest-date")

		newestDateParam = param
	} else {
	}
	var oldestDateParam string
	if query.Has("oldest-date") {
		param := query.Get("oldest-date")

		oldestDateParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListInvoicesBulk(r.Context(), xVParam, newestDateParam, oldestDateParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListInvoicesForAccounts - Get Invoices For Specific Accounts
func (c *DefaultAPIController) ListInvoicesForAccounts(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	requestAccountIdListParam := RequestAccountIdList{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestAccountIdListRequired(requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRequestAccountIdListConstraints(requestAccountIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var newestDateParam string
	if query.Has("newest-date") {
		param := query.Get("newest-date")

		newestDateParam = param
	} else {
	}
	var oldestDateParam string
	if query.Has("oldest-date") {
		param := query.Get("oldest-date")

		oldestDateParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListInvoicesForAccounts(r.Context(), xVParam, requestAccountIdListParam, newestDateParam, oldestDateParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListPlans - Get Generic Plans
func (c *DefaultAPIController) ListPlans(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var type_Param ListPlanType
	if query.Has("type") {
		param := ListPlanType(query.Get("type"))

		type_Param = param
	} else {
	}
	var fuelTypeParam FuelType
	if query.Has("fuelType") {
		param := FuelType(query.Get("fuelType"))

		fuelTypeParam = param
	} else {
	}
	var effectiveParam Effective
	if query.Has("effective") {
		param := Effective(query.Get("effective"))

		effectiveParam = param
	} else {
	}
	var updatedSinceParam string
	if query.Has("updated-since") {
		param := query.Get("updated-since")

		updatedSinceParam = param
	} else {
	}
	var brandParam string
	if query.Has("brand") {
		param := query.Get("brand")

		brandParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	result, err := c.service.ListPlans(r.Context(), xVParam, type_Param, fuelTypeParam, effectiveParam, updatedSinceParam, brandParam, pageParam, pageSizeParam, xMinVParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListServicePoints - Get Service Points
func (c *DefaultAPIController) ListServicePoints(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListServicePoints(r.Context(), xVParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListUsageBulk - Get Bulk Usage
func (c *DefaultAPIController) ListUsageBulk(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	var intervalReadsParam IntervalRead
	if query.Has("interval-reads") {
		param := IntervalRead(query.Get("interval-reads"))

		intervalReadsParam = param
	} else {
	}
	var oldestDateParam string
	if query.Has("oldest-date") {
		param := query.Get("oldest-date")

		oldestDateParam = param
	} else {
	}
	var newestDateParam string
	if query.Has("newest-date") {
		param := query.Get("newest-date")

		newestDateParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListUsageBulk(r.Context(), xVParam, intervalReadsParam, oldestDateParam, newestDateParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListUsageForServicePoints - Get Usage For Specific Service Points
func (c *DefaultAPIController) ListUsageForServicePoints(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	xVParam := r.Header.Get("x-v")
	requestServicePointIdListParam := RequestServicePointIdList{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestServicePointIdListParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestServicePointIdListRequired(requestServicePointIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRequestServicePointIdListConstraints(requestServicePointIdListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var oldestDateParam string
	if query.Has("oldest-date") {
		param := query.Get("oldest-date")

		oldestDateParam = param
	} else {
	}
	var newestDateParam string
	if query.Has("newest-date") {
		param := query.Get("newest-date")

		newestDateParam = param
	} else {
	}
	var intervalReadsParam IntervalRead
	if query.Has("interval-reads") {
		param := IntervalRead(query.Get("interval-reads"))

		intervalReadsParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("page-size") {
		param, err := parseNumericParameter[int32](
			query.Get("page-size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	xMinVParam := r.Header.Get("x-min-v")
	xFapiInteractionIdParam := r.Header.Get("x-fapi-interaction-id")
	xFapiAuthDateParam := r.Header.Get("x-fapi-auth-date")
	xFapiCustomerIpAddressParam := r.Header.Get("x-fapi-customer-ip-address")
	xCdsClientHeadersParam := r.Header.Get("x-cds-client-headers")
	result, err := c.service.ListUsageForServicePoints(r.Context(), xVParam, requestServicePointIdListParam, oldestDateParam, newestDateParam, intervalReadsParam, pageParam, pageSizeParam, xMinVParam, xFapiInteractionIdParam, xFapiAuthDateParam, xFapiCustomerIpAddressParam, xCdsClientHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
