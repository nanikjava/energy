// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




// CommonPafAddress - Australian address formatted according to the file format defined by the [PAF file format](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). Required if addressUType is set to paf
type CommonPafAddress struct {

	// Unique identifier for an address as defined by Australia Post.  Also known as Delivery Point Identifier
	Dpid string `json:"dpid,omitempty"`

	// Thoroughfare number for a property (first number in a property ranged address)
	ThoroughfareNumber1 int32 `json:"thoroughfareNumber1,omitempty"`

	// Suffix for the thoroughfare number. Only relevant is thoroughfareNumber1 is populated
	ThoroughfareNumber1Suffix string `json:"thoroughfareNumber1Suffix,omitempty"`

	// Second thoroughfare number (only used if the property has a ranged address eg 23-25)
	ThoroughfareNumber2 int32 `json:"thoroughfareNumber2,omitempty"`

	// Suffix for the second thoroughfare number. Only relevant is thoroughfareNumber2 is populated
	ThoroughfareNumber2Suffix string `json:"thoroughfareNumber2Suffix,omitempty"`

	// Type of flat or unit for the address
	FlatUnitType string `json:"flatUnitType,omitempty"`

	// Unit number (including suffix, if applicable)
	FlatUnitNumber string `json:"flatUnitNumber,omitempty"`

	// Type of floor or level for the address
	FloorLevelType string `json:"floorLevelType,omitempty"`

	// Floor or level number (including alpha characters)
	FloorLevelNumber string `json:"floorLevelNumber,omitempty"`

	// Allotment number for the address
	LotNumber string `json:"lotNumber,omitempty"`

	// Building/Property name 1
	BuildingName1 string `json:"buildingName1,omitempty"`

	// Building/Property name 2
	BuildingName2 string `json:"buildingName2,omitempty"`

	// The name of the street
	StreetName string `json:"streetName,omitempty"`

	// The street type. Valid enumeration defined by Australia Post PAF code file
	StreetType string `json:"streetType,omitempty"`

	// The street type suffix. Valid enumeration defined by Australia Post PAF code file
	StreetSuffix string `json:"streetSuffix,omitempty"`

	// Postal delivery type. (eg. PO BOX). Valid enumeration defined by Australia Post PAF code file
	PostalDeliveryType string `json:"postalDeliveryType,omitempty"`

	// Postal delivery number if the address is a postal delivery type
	PostalDeliveryNumber int32 `json:"postalDeliveryNumber,omitempty"`

	// Postal delivery number prefix related to the postal delivery number
	PostalDeliveryNumberPrefix string `json:"postalDeliveryNumberPrefix,omitempty"`

	// Postal delivery number suffix related to the postal delivery number
	PostalDeliveryNumberSuffix string `json:"postalDeliveryNumberSuffix,omitempty"`

	// Full name of locality
	LocalityName string `json:"localityName"`

	// Postcode for the locality
	Postcode string `json:"postcode"`

	// State in which the address belongs. Valid enumeration defined by Australia Post PAF code file [State Type Abbreviation](https://auspost.com.au/content/dam/auspost_corp/media/documents/australia-post-data-guide.pdf). NSW, QLD, VIC, NT, WA, SA, TAS, ACT, AAT
	State string `json:"state"`
}

// AssertCommonPafAddressRequired checks if the required fields are not zero-ed
func AssertCommonPafAddressRequired(obj CommonPafAddress) error {
	elements := map[string]interface{}{
		"localityName": obj.LocalityName,
		"postcode": obj.Postcode,
		"state": obj.State,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertCommonPafAddressConstraints checks if the values respects the defined constraints
func AssertCommonPafAddressConstraints(obj CommonPafAddress) error {
	return nil
}
