// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyBillingOtherTransaction struct {

	// The ID of the service point to which this transaction applies if any
	ServicePointId string `json:"servicePointId,omitempty"`

	// The number of the invoice in which this transaction is included if it has been issued
	InvoiceNumber string `json:"invoiceNumber,omitempty"`

	// Optional start date for the application of the charge
	StartDate string `json:"startDate,omitempty"`

	// Optional end date for the application of the charge
	EndDate string `json:"endDate,omitempty"`

	// Type of charge. Assumed to be other if absent
	Type string `json:"type,omitempty"`

	// The amount of the charge
	Amount string `json:"amount"`

	// A free text description of the item
	Description string `json:"description"`

	// Additional calculation factors that inform the transaction
	CalculationFactors []EnergyBillingUsageTransactionV2CalculationFactors `json:"calculationFactors,omitempty"`

	// Optional array of adjustments arising for this transaction
	Adjustments []EnergyBillingUsageTransactionV2Adjustments `json:"adjustments,omitempty"`
}

// AssertEnergyBillingOtherTransactionRequired checks if the required fields are not zero-ed
func AssertEnergyBillingOtherTransactionRequired(obj EnergyBillingOtherTransaction) error {
	elements := map[string]interface{}{
		"amount": obj.Amount,
		"description": obj.Description,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.CalculationFactors {
		if err := AssertEnergyBillingUsageTransactionV2CalculationFactorsRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Adjustments {
		if err := AssertEnergyBillingUsageTransactionV2AdjustmentsRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEnergyBillingOtherTransactionConstraints checks if the values respects the defined constraints
func AssertEnergyBillingOtherTransactionConstraints(obj EnergyBillingOtherTransaction) error {
	return nil
}
