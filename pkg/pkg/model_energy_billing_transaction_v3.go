// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyBillingTransactionV3 struct {

	// The ID of the account for which transaction applies
	AccountId string `json:"accountId"`

	// The date and time that the transaction occurred
	ExecutionDateTime string `json:"executionDateTime"`

	// The GST incurred in the transaction.  Should not be included for credits or payments.  If absent zero is assumed
	Gst string `json:"gst,omitempty"`

	// Indicator of the type of transaction object present in this record
	TransactionUType string `json:"transactionUType"`

	Usage EnergyBillingUsageTransactionV2 `json:"usage,omitempty"`

	Demand EnergyBillingDemandTransactionV3 `json:"demand,omitempty"`

	OnceOff EnergyBillingOnceOffTransaction `json:"onceOff,omitempty"`

	OtherCharges EnergyBillingOtherTransaction `json:"otherCharges,omitempty"`

	Payment EnergyBillingPaymentTransaction `json:"payment,omitempty"`
}

// AssertEnergyBillingTransactionV3Required checks if the required fields are not zero-ed
func AssertEnergyBillingTransactionV3Required(obj EnergyBillingTransactionV3) error {
	elements := map[string]interface{}{
		"accountId": obj.AccountId,
		"executionDateTime": obj.ExecutionDateTime,
		"transactionUType": obj.TransactionUType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEnergyBillingUsageTransactionV2Required(obj.Usage); err != nil {
		return err
	}
	if err := AssertEnergyBillingDemandTransactionV3Required(obj.Demand); err != nil {
		return err
	}
	if err := AssertEnergyBillingOnceOffTransactionRequired(obj.OnceOff); err != nil {
		return err
	}
	if err := AssertEnergyBillingOtherTransactionRequired(obj.OtherCharges); err != nil {
		return err
	}
	if err := AssertEnergyBillingPaymentTransactionRequired(obj.Payment); err != nil {
		return err
	}
	return nil
}

// AssertEnergyBillingTransactionV3Constraints checks if the values respects the defined constraints
func AssertEnergyBillingTransactionV3Constraints(obj EnergyBillingTransactionV3) error {
	return nil
}
