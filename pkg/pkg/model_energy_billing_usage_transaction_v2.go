// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyBillingUsageTransactionV2 struct {

	// The ID of the service point to which this transaction applies if any
	ServicePointId string `json:"servicePointId,omitempty"`

	// The number of the invoice in which this transaction is included if it has been issued
	InvoiceNumber string `json:"invoiceNumber,omitempty"`

	// The time of use type that the transaction applies to
	TimeOfUseType string `json:"timeOfUseType"`

	// Optional description of the transaction that can be used for display purposes
	Description string `json:"description,omitempty"`

	// Flag indicating if the usage is estimated or actual.  True indicates estimate.  False or absent indicates actual
	IsEstimate bool `json:"isEstimate,omitempty"`

	// Date and time when the usage period starts
	StartDate string `json:"startDate"`

	// Date and time when the usage period ends
	EndDate string `json:"endDate"`

	// The measurement unit of rate. Assumed to be KWH if absent
	MeasureUnit string `json:"measureUnit,omitempty"`

	// The usage for the period in measure unit.  A negative value indicates power generated
	Usage float32 `json:"usage"`

	// The amount charged or credited for this transaction prior to any adjustments being applied.  A negative value indicates a credit
	Amount string `json:"amount"`

	// Additional calculation factors that inform the transaction
	CalculationFactors []EnergyBillingUsageTransactionV2CalculationFactors `json:"calculationFactors,omitempty"`

	// Optional array of adjustments arising for this transaction
	Adjustments []EnergyBillingUsageTransactionV2Adjustments `json:"adjustments,omitempty"`
}

// AssertEnergyBillingUsageTransactionV2Required checks if the required fields are not zero-ed
func AssertEnergyBillingUsageTransactionV2Required(obj EnergyBillingUsageTransactionV2) error {
	elements := map[string]interface{}{
		"timeOfUseType": obj.TimeOfUseType,
		"startDate": obj.StartDate,
		"endDate": obj.EndDate,
		"usage": obj.Usage,
		"amount": obj.Amount,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.CalculationFactors {
		if err := AssertEnergyBillingUsageTransactionV2CalculationFactorsRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Adjustments {
		if err := AssertEnergyBillingUsageTransactionV2AdjustmentsRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEnergyBillingUsageTransactionV2Constraints checks if the values respects the defined constraints
func AssertEnergyBillingUsageTransactionV2Constraints(obj EnergyBillingUsageTransactionV2) error {
	return nil
}
