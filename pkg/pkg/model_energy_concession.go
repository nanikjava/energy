// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyConcession struct {

	// Indicator of the method of concession calculation
	Type string `json:"type"`

	// The display name of the concession
	DisplayName string `json:"displayName"`

	// Display text providing more information on the concession. Mandatory if type is VARIABLE
	AdditionalInfo string `json:"additionalInfo,omitempty"`

	// Optional link to additional information regarding the concession
	AdditionalInfoUri string `json:"additionalInfoUri,omitempty"`

	// Optional start date for the application of the concession
	StartDate string `json:"startDate,omitempty"`

	// Optional end date for the application of the concession
	EndDate string `json:"endDate,omitempty"`

	// Conditional attribute for frequency at which a concession is applied. Required if type is FIXED_AMOUNT or FIXED_PERCENTAGE. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	DiscountFrequency string `json:"discountFrequency,omitempty"`

	// Conditional attribute for the amount of discount for the concession- required if type is FIXED_AMOUNT
	Amount string `json:"amount,omitempty"`

	// Conditional attribute for the percentage of discount of concession - required if type is FIXED_PERCENTAGE
	Percentage string `json:"percentage,omitempty"`

	// Array of ENUM's to specify what the concession applies to. Multiple ENUM values can be provided. If absent, USAGE is assumed
	AppliedTo []string `json:"appliedTo,omitempty"`
}

// AssertEnergyConcessionRequired checks if the required fields are not zero-ed
func AssertEnergyConcessionRequired(obj EnergyConcession) error {
	elements := map[string]interface{}{
		"type": obj.Type,
		"displayName": obj.DisplayName,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyConcessionConstraints checks if the values respects the defined constraints
func AssertEnergyConcessionConstraints(obj EnergyConcession) error {
	return nil
}
