// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver


import (
	"errors"
)



type EnergyDerRecord struct {

	// Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements
	ServicePointId string `json:"servicePointId"`

	// Approved small generating unit capacity as agreed with NSP in the connection agreement, expressed in kVA. Value of 0 indicates no DER record exists for the given servicePointId
	ApprovedCapacity float32 `json:"approvedCapacity"`

	// The number of phases available for the installation of DER. Acceptable values are 0, 1, 2 or 3. Value of 0 indicates no DER record exists for the given servicePointId
	AvailablePhasesCount int32 `json:"availablePhasesCount"`

	// The number of phases that DER is connected to. Acceptable values are 0, 1, 2 or 3. Value of 0 indicates no DER record exists for the given servicePointId
	InstalledPhasesCount int32 `json:"installedPhasesCount"`

	// For identification of small generating units designed with the ability to operate in an islanded mode
	IslandableInstallation bool `json:"islandableInstallation"`

	// For DER installations where NSPs specify the need for additional forms of protection above those inbuilt in an inverter.  If absent then assumed to be false
	HasCentralProtectionControl bool `json:"hasCentralProtectionControl,omitempty"`

	ProtectionMode EnergyDerRecordProtectionMode `json:"protectionMode,omitempty"`

	AcConnections []EnergyDerRecordAcConnections `json:"acConnections"`
}

// AssertEnergyDerRecordRequired checks if the required fields are not zero-ed
func AssertEnergyDerRecordRequired(obj EnergyDerRecord) error {
	elements := map[string]interface{}{
		"servicePointId": obj.ServicePointId,
		"approvedCapacity": obj.ApprovedCapacity,
		"availablePhasesCount": obj.AvailablePhasesCount,
		"installedPhasesCount": obj.InstalledPhasesCount,
		"islandableInstallation": obj.IslandableInstallation,
		"acConnections": obj.AcConnections,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEnergyDerRecordProtectionModeRequired(obj.ProtectionMode); err != nil {
		return err
	}
	for _, el := range obj.AcConnections {
		if err := AssertEnergyDerRecordAcConnectionsRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEnergyDerRecordConstraints checks if the values respects the defined constraints
func AssertEnergyDerRecordConstraints(obj EnergyDerRecord) error {
	if obj.AvailablePhasesCount < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.AvailablePhasesCount > 3 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	if obj.InstalledPhasesCount < 0 {
		return &ParsingError{Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.InstalledPhasesCount > 3 {
		return &ParsingError{Err: errors.New(errMsgMaxValueConstraint)}
	}
	return nil
}
