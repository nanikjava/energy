// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyDerRecordAcConnections struct {

	// AC Connection ID as defined in the DER register.  Does not align with CDR ID permanence standards
	ConnectionIdentifier float32 `json:"connectionIdentifier"`

	// Number of AC Connections in the group. For the suite of AC Connections to be considered as a group, all of the AC Connections included must have the same attributes
	Count int32 `json:"count"`

	// Indicates whether the DER device is connected via an inverter (and what category of inverter it is) or not (e.g. rotating machine). If absent, assume equipment type to be “OTHER”.
	EquipmentType string `json:"equipmentType,omitempty"`

	// The name of the inverter manufacturer. Mandatory if equipmentType is INVERTER
	ManufacturerName string `json:"manufacturerName,omitempty"`

	// The inverter series. Mandatory if equipmentType is INVERTER
	InverterSeries string `json:"inverterSeries,omitempty"`

	// The inverter model number. Mandatory if equipmentType is INVERTER
	InverterModelNumber string `json:"inverterModelNumber,omitempty"`

	// The date that the DER installation is commissioned
	CommissioningDate string `json:"commissioningDate"`

	// Code used to indicate the status of the Inverter. This will be used to identify if an inverter is active or inactive or decommissioned
	Status string `json:"status"`

	// The rated AC output power that is listed in the product specified by the manufacturer. Mandatory if equipmentType is INVERTER. Default is 0 if value not known
	InverterDeviceCapacity float32 `json:"inverterDeviceCapacity,omitempty"`

	DerDevices []EnergyDerRecordDerDevices `json:"derDevices"`
}

// AssertEnergyDerRecordAcConnectionsRequired checks if the required fields are not zero-ed
func AssertEnergyDerRecordAcConnectionsRequired(obj EnergyDerRecordAcConnections) error {
	elements := map[string]interface{}{
		"connectionIdentifier": obj.ConnectionIdentifier,
		"count": obj.Count,
		"commissioningDate": obj.CommissioningDate,
		"status": obj.Status,
		"derDevices": obj.DerDevices,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.DerDevices {
		if err := AssertEnergyDerRecordDerDevicesRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEnergyDerRecordAcConnectionsConstraints checks if the values respects the defined constraints
func AssertEnergyDerRecordAcConnectionsConstraints(obj EnergyDerRecordAcConnections) error {
	return nil
}
