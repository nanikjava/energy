// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyDerRecordDerDevices struct {

	// Unique identifier for a single DER device or a group of DER devices with the same attributes. Does not align with CDR ID permanence standards
	DeviceIdentifier float32 `json:"deviceIdentifier"`

	// Number of devices in the group of DER devices
	Count int32 `json:"count"`

	// The name of the device manufacturer. If absent then assumed to be “unknown”
	Manufacturer string `json:"manufacturer,omitempty"`

	// The model number of the device. If absent then assumed to be “unknown”
	ModelNumber string `json:"modelNumber,omitempty"`

	// Code used to indicate the status of the device. This will be used to identify if an inverter is active or inactive or decommissioned
	Status string `json:"status,omitempty"`

	// Used to indicate the primary technology used in the DER device
	Type string `json:"type"`

	// Used to indicate the primary technology used in the DER device. This field is also used to record for example the battery chemistry, or the type of PV panel. It is also used to record if a battery is contained in an electric vehicle connected in a vehicle-to-grid arrangement. If absent then assumed to be “other”
	Subtype string `json:"subtype,omitempty"`

	// Maximum output in kVA that is listed in the product specification by the manufacturer. This refers to the capacity of each unit within the device group. Default is 0 if value not known
	NominalRatedCapacity float32 `json:"nominalRatedCapacity"`

	// Maximum storage capacity in kVAh. This refers to the capacity of each storage module within the device group. Mandatory if type is equal to “STORAGE”. Default is 0 if value not known
	NominalStorageCapacity float32 `json:"nominalStorageCapacity,omitempty"`
}

// AssertEnergyDerRecordDerDevicesRequired checks if the required fields are not zero-ed
func AssertEnergyDerRecordDerDevicesRequired(obj EnergyDerRecordDerDevices) error {
	elements := map[string]interface{}{
		"deviceIdentifier": obj.DeviceIdentifier,
		"count": obj.Count,
		"type": obj.Type,
		"nominalRatedCapacity": obj.NominalRatedCapacity,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyDerRecordDerDevicesConstraints checks if the values respects the defined constraints
func AssertEnergyDerRecordDerDevicesConstraints(obj EnergyDerRecordDerDevices) error {
	return nil
}
