// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyInvoiceElectricityUsageCharges struct {

	// The aggregate total of usage charges for the period covered by the invoice (exclusive of GST)
	TotalUsageCharges string `json:"totalUsageCharges"`

	// The aggregate total of generation credits for the period covered by the invoice (exclusive of GST)
	TotalGenerationCredits string `json:"totalGenerationCredits"`

	// The aggregate total of any once off charges arising from electricity usage for the period covered by the invoice (exclusive of GST)
	TotalOnceOffCharges string `json:"totalOnceOffCharges"`

	// The aggregate total of any once off discounts or credits arising from electricity usage for the period covered by the invoice (exclusive of GST)
	TotalOnceOffDiscounts string `json:"totalOnceOffDiscounts"`

	// Optional array of charges that may be part of the invoice (for e.g. environmental charges for C&I consumers) (exclusive of GST)
	OtherCharges []EnergyInvoiceGasUsageChargesOtherCharges `json:"otherCharges,omitempty"`

	// The total GST for all electricity usage charges.  If absent then zero is assumed
	TotalGst string `json:"totalGst,omitempty"`
}

// AssertEnergyInvoiceElectricityUsageChargesRequired checks if the required fields are not zero-ed
func AssertEnergyInvoiceElectricityUsageChargesRequired(obj EnergyInvoiceElectricityUsageCharges) error {
	elements := map[string]interface{}{
		"totalUsageCharges": obj.TotalUsageCharges,
		"totalGenerationCredits": obj.TotalGenerationCredits,
		"totalOnceOffCharges": obj.TotalOnceOffCharges,
		"totalOnceOffDiscounts": obj.TotalOnceOffDiscounts,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.OtherCharges {
		if err := AssertEnergyInvoiceGasUsageChargesOtherChargesRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEnergyInvoiceElectricityUsageChargesConstraints checks if the values respects the defined constraints
func AssertEnergyInvoiceElectricityUsageChargesConstraints(obj EnergyInvoiceElectricityUsageCharges) error {
	return nil
}
