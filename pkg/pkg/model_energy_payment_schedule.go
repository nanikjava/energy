// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyPaymentSchedule struct {

	// Optional payment amount indicating that a constant payment amount is scheduled to be paid (used in bill smoothing scenarios)
	Amount string `json:"amount,omitempty"`

	// The type of object present in this response
	PaymentScheduleUType string `json:"paymentScheduleUType"`

	CardDebit EnergyPaymentScheduleCardDebit `json:"cardDebit,omitempty"`

	DirectDebit EnergyPaymentScheduleDirectDebit `json:"directDebit,omitempty"`

	DigitalWallet EnergyPaymentScheduleDigitalWallet `json:"digitalWallet,omitempty"`

	ManualPayment EnergyPaymentScheduleManualPayment `json:"manualPayment,omitempty"`
}

// AssertEnergyPaymentScheduleRequired checks if the required fields are not zero-ed
func AssertEnergyPaymentScheduleRequired(obj EnergyPaymentSchedule) error {
	elements := map[string]interface{}{
		"paymentScheduleUType": obj.PaymentScheduleUType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEnergyPaymentScheduleCardDebitRequired(obj.CardDebit); err != nil {
		return err
	}
	if err := AssertEnergyPaymentScheduleDirectDebitRequired(obj.DirectDebit); err != nil {
		return err
	}
	if err := AssertEnergyPaymentScheduleDigitalWalletRequired(obj.DigitalWallet); err != nil {
		return err
	}
	if err := AssertEnergyPaymentScheduleManualPaymentRequired(obj.ManualPayment); err != nil {
		return err
	}
	return nil
}

// AssertEnergyPaymentScheduleConstraints checks if the values respects the defined constraints
func AssertEnergyPaymentScheduleConstraints(obj EnergyPaymentSchedule) error {
	return nil
}
