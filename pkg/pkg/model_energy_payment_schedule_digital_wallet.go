// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




// EnergyPaymentScheduleDigitalWallet - Represents a regular payment from a digital wallet. Mandatory if paymentScheduleUType is set to digitalWallet
type EnergyPaymentScheduleDigitalWallet struct {

	// The display name of the wallet as given by the customer, else a default value defined by the data holder
	Name string `json:"name"`

	// The identifier of the digital wallet (dependent on type)
	Identifier string `json:"identifier"`

	// The type of the digital wallet identifier
	Type string `json:"type"`

	// The provider of the digital wallet
	Provider string `json:"provider"`

	// The frequency that payments will occur.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	PaymentFrequency string `json:"paymentFrequency"`

	// The mechanism by which the payment amount is calculated.  Explanation of values are as follows:<br/><ul><li>**STATIC** - Indicates a consistent, static amount, per payment</li><li>**BALANCE** - Indicates that the outstanding balance for the account is paid per period</li><li>**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm</li></ul>
	CalculationType string `json:"calculationType"`
}

// AssertEnergyPaymentScheduleDigitalWalletRequired checks if the required fields are not zero-ed
func AssertEnergyPaymentScheduleDigitalWalletRequired(obj EnergyPaymentScheduleDigitalWallet) error {
	elements := map[string]interface{}{
		"name": obj.Name,
		"identifier": obj.Identifier,
		"type": obj.Type,
		"provider": obj.Provider,
		"paymentFrequency": obj.PaymentFrequency,
		"calculationType": obj.CalculationType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyPaymentScheduleDigitalWalletConstraints checks if the values respects the defined constraints
func AssertEnergyPaymentScheduleDigitalWalletConstraints(obj EnergyPaymentScheduleDigitalWallet) error {
	return nil
}
