// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




// EnergyPaymentScheduleDirectDebit - Represents a regular direct debit from a specified bank account. Mandatory if paymentScheduleUType is set to directDebit
type EnergyPaymentScheduleDirectDebit struct {

	// Flag indicating that the account details are tokenised, or held in a closed system, and is not accessible through any other channels. False if absent
	IsTokenised bool `json:"isTokenised,omitempty"`

	// The unmasked BSB for the account to be debited. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces.  Is required if isTokenised is absent or false
	Bsb string `json:"bsb,omitempty"`

	// The unmasked account number for the account to be debited. Is expected to be formatted as digits only with leading zeros included and no punctuation or spaces.  Is required if isTokenised is absent or false
	AccountNumber string `json:"accountNumber,omitempty"`

	// The frequency that payments will occur.  Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	PaymentFrequency string `json:"paymentFrequency"`

	// The mechanism by which the payment amount is calculated.  Explanation of values are as follows:<br/><ul><li>**STATIC** - Indicates a consistent, static amount, per payment</li><li>**BALANCE** - Indicates that the outstanding balance for the account is paid per period</li><li>**CALCULATED** - Indicates that the payment amount is variable and calculated using a pre-defined algorithm</li></ul>
	CalculationType string `json:"calculationType"`
}

// AssertEnergyPaymentScheduleDirectDebitRequired checks if the required fields are not zero-ed
func AssertEnergyPaymentScheduleDirectDebitRequired(obj EnergyPaymentScheduleDirectDebit) error {
	elements := map[string]interface{}{
		"paymentFrequency": obj.PaymentFrequency,
		"calculationType": obj.CalculationType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyPaymentScheduleDirectDebitConstraints checks if the values respects the defined constraints
func AssertEnergyPaymentScheduleDirectDebitConstraints(obj EnergyPaymentScheduleDirectDebit) error {
	return nil
}
