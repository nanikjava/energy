// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyPlanContractFullV3AllOf struct {

	// The term for the contract.  If absent assumes no specified term
	TermType string `json:"termType,omitempty"`

	// Description of the benefit period.  Should only be present if termType has the value ONGOING
	BenefitPeriod string `json:"benefitPeriod,omitempty"`

	// Free text description of the terms for the contract
	Terms string `json:"terms,omitempty"`

	// An array of the meter types that this contract is available for
	MeterTypes []string `json:"meterTypes,omitempty"`

	// Number of days in the cooling off period for the contract.  Mandatory for plans with type of MARKET 
	CoolingOffDays int32 `json:"coolingOffDays,omitempty"`

	// An array of the available billing schedules for this contract. Formatted according to [ISO 8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) (excludes recurrence syntax)
	BillFrequency []string `json:"billFrequency"`
}

// AssertEnergyPlanContractFullV3AllOfRequired checks if the required fields are not zero-ed
func AssertEnergyPlanContractFullV3AllOfRequired(obj EnergyPlanContractFullV3AllOf) error {
	elements := map[string]interface{}{
		"billFrequency": obj.BillFrequency,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyPlanContractFullV3AllOfConstraints checks if the values respects the defined constraints
func AssertEnergyPlanContractFullV3AllOfConstraints(obj EnergyPlanContractFullV3AllOf) error {
	return nil
}
