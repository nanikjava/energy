// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyPlanDetailV3 struct {

	// The ID of the specific plan
	PlanId string `json:"planId"`

	// The date and time from which this plan is effective (ie. is available for origination). Used to enable the articulation of products to the regime before they are available for customers to originate
	EffectiveFrom string `json:"effectiveFrom,omitempty"`

	// The date and time at which this plan will be retired and will no longer be offered. Used to enable the managed deprecation of plans
	EffectiveTo string `json:"effectiveTo,omitempty"`

	// The last date and time that the information for this plan was changed (or the creation date for the plan if it has never been altered)
	LastUpdated string `json:"lastUpdated"`

	// The display name of the plan
	DisplayName string `json:"displayName,omitempty"`

	// A description of the plan
	Description string `json:"description,omitempty"`

	// The type of the plan
	Type string `json:"type"`

	// The fuel types covered by the plan
	FuelType string `json:"fuelType"`

	// The ID of the brand under which this plan is offered
	Brand string `json:"brand"`

	// The display name of the brand under which this plan is offered
	BrandName string `json:"brandName"`

	// A link to an application web page where this plan can be applied for
	ApplicationUri string `json:"applicationUri,omitempty"`

	AdditionalInformation EnergyPlanAdditionalInformation `json:"additionalInformation,omitempty"`

	// The type of customer that the plan is offered to.  If absent then the plan is available to all customers
	CustomerType string `json:"customerType,omitempty"`

	Geography EnergyPlanGeography `json:"geography,omitempty"`

	// Charges for metering included in the plan
	MeteringCharges []EnergyPlanDetailV3AllOfMeteringCharges `json:"meteringCharges,omitempty"`

	GasContract EnergyPlanContractFullV3 `json:"gasContract,omitempty"`

	ElectricityContract EnergyPlanContractFullV3 `json:"electricityContract,omitempty"`
}

// AssertEnergyPlanDetailV3Required checks if the required fields are not zero-ed
func AssertEnergyPlanDetailV3Required(obj EnergyPlanDetailV3) error {
	elements := map[string]interface{}{
		"planId": obj.PlanId,
		"lastUpdated": obj.LastUpdated,
		"type": obj.Type,
		"fuelType": obj.FuelType,
		"brand": obj.Brand,
		"brandName": obj.BrandName,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertEnergyPlanAdditionalInformationRequired(obj.AdditionalInformation); err != nil {
		return err
	}
	if err := AssertEnergyPlanGeographyRequired(obj.Geography); err != nil {
		return err
	}
	for _, el := range obj.MeteringCharges {
		if err := AssertEnergyPlanDetailV3AllOfMeteringChargesRequired(el); err != nil {
			return err
		}
	}
	if err := AssertEnergyPlanContractFullV3Required(obj.GasContract); err != nil {
		return err
	}
	if err := AssertEnergyPlanContractFullV3Required(obj.ElectricityContract); err != nil {
		return err
	}
	return nil
}

// AssertEnergyPlanDetailV3Constraints checks if the values respects the defined constraints
func AssertEnergyPlanDetailV3Constraints(obj EnergyPlanDetailV3) error {
	return nil
}
