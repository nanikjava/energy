// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




// EnergyPlanGeography - Describes the geographical area that the plan is available for.  If absent then it is assumed the plan is not geographically limited
type EnergyPlanGeography struct {

	// Array of valid Australian postcodes that are specifically excluded from the plan.  Each element is a single four digit postcode (e.g. 3000) or a range of postcodes defined by two four digit postcodes and a hyphen (e.g. 3000-3999)
	ExcludedPostcodes []string `json:"excludedPostcodes,omitempty"`

	// Array of valid Australian postcodes that are included from the plan.  If absent defaults to all non-excluded postcodes.  Each element is a single four digit postcode (e.g. 3000) or a range of postcodes defined by two four digit postcodes and a hyphen (e.g. 3000-3999)
	IncludedPostcodes []string `json:"includedPostcodes,omitempty"`

	// Array of distributors for the plan. Must have at least one entry
	Distributors []string `json:"distributors"`
}

// AssertEnergyPlanGeographyRequired checks if the required fields are not zero-ed
func AssertEnergyPlanGeographyRequired(obj EnergyPlanGeography) error {
	elements := map[string]interface{}{
		"distributors": obj.Distributors,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyPlanGeographyConstraints checks if the values respects the defined constraints
func AssertEnergyPlanGeographyConstraints(obj EnergyPlanGeography) error {
	return nil
}
