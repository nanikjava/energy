// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyPlanSolarFeedInTariffV3InnerTimeVaryingTariffsInnerTimeVariationsInner struct {

	// The days that the tariff applies to. At least one entry required
	Days []string `json:"days"`

	// The beginning of the time period per day for which the tariff applies.  If absent assumes start of day (ie. midnight).  Formatted according to [ISO 8601 Times](https://en.wikipedia.org/wiki/ISO_8601#Times). If the time is provided without a UTC offset, the time zone will be determined by the value of EnergyPlanContract.timeZone.
	StartTime string `json:"startTime,omitempty"`

	// The end of the time period per day for which the tariff applies.  If absent assumes end of day (ie. one second before midnight).  Formatted according to [ISO 8601 Times](https://en.wikipedia.org/wiki/ISO_8601#Times). If the time is provided without a UTC offset, the time zone will be determined by the value of EnergyPlanContract.timeZone.
	EndTime string `json:"endTime,omitempty"`
}

// AssertEnergyPlanSolarFeedInTariffV3InnerTimeVaryingTariffsInnerTimeVariationsInnerRequired checks if the required fields are not zero-ed
func AssertEnergyPlanSolarFeedInTariffV3InnerTimeVaryingTariffsInnerTimeVariationsInnerRequired(obj EnergyPlanSolarFeedInTariffV3InnerTimeVaryingTariffsInnerTimeVariationsInner) error {
	elements := map[string]interface{}{
		"days": obj.Days,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyPlanSolarFeedInTariffV3InnerTimeVaryingTariffsInnerTimeVariationsInnerConstraints checks if the values respects the defined constraints
func AssertEnergyPlanSolarFeedInTariffV3InnerTimeVaryingTariffsInnerTimeVariationsInnerConstraints(obj EnergyPlanSolarFeedInTariffV3InnerTimeVaryingTariffsInnerTimeVariationsInner) error {
	return nil
}
