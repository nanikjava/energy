// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyPlanTariffPeriodV2Inner struct {

	// Type of charge. Assumed to be other if absent
	Type string `json:"type,omitempty"`

	// The name of the tariff period
	DisplayName string `json:"displayName"`

	// The start date of the tariff period in a calendar year.  Formatted in mm-dd format
	StartDate string `json:"startDate"`

	// The end date of the tariff period in a calendar year.  Formatted in mm-dd format
	EndDate string `json:"endDate"`

	// Specifies if daily supply charge is single or banded. Default value is SINGLE if field not provided
	DailySupplyChargeType string `json:"dailySupplyChargeType,omitempty"`

	// The amount of access charge for the tariff period, in dollars per day exclusive of GST. Mandatory if dailySupplyChargeType is SINGLE
	DailySupplyCharge string `json:"dailySupplyCharge,omitempty"`

	// Array representing banded daily supply charge rates.  Mandatory if dailySupplyChargeType is BAND
	BandedDailySupplyCharges []EnergyPlanTariffPeriodV2InnerBandedDailySupplyChargesInner `json:"bandedDailySupplyCharges,omitempty"`

	// Specifies the charge specific time zone for calculation of the time of use thresholds. If absent, timezone value in EnergyPlanContract is assumed.
	TimeZone string `json:"timeZone,omitempty"`

	// Specifies the type of rate applicable to this tariff period
	RateBlockUType string `json:"rateBlockUType"`

	SingleRate EnergyPlanTariffPeriodV2InnerSingleRate `json:"singleRate,omitempty"`

	// Array of objects representing time of use rates.  Required if rateBlockUType is timeOfUseRates
	TimeOfUseRates []EnergyPlanTariffPeriodV2InnerTimeOfUseRatesInner `json:"timeOfUseRates,omitempty"`

	// Array of demand charges.  Required if rateBlockUType is demandCharges
	DemandCharges []EnergyPlanTariffPeriodV2InnerDemandChargesInner `json:"demandCharges,omitempty"`
}

// AssertEnergyPlanTariffPeriodV2InnerRequired checks if the required fields are not zero-ed
func AssertEnergyPlanTariffPeriodV2InnerRequired(obj EnergyPlanTariffPeriodV2Inner) error {
	elements := map[string]interface{}{
		"displayName": obj.DisplayName,
		"startDate": obj.StartDate,
		"endDate": obj.EndDate,
		"rateBlockUType": obj.RateBlockUType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.BandedDailySupplyCharges {
		if err := AssertEnergyPlanTariffPeriodV2InnerBandedDailySupplyChargesInnerRequired(el); err != nil {
			return err
		}
	}
	if err := AssertEnergyPlanTariffPeriodV2InnerSingleRateRequired(obj.SingleRate); err != nil {
		return err
	}
	for _, el := range obj.TimeOfUseRates {
		if err := AssertEnergyPlanTariffPeriodV2InnerTimeOfUseRatesInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.DemandCharges {
		if err := AssertEnergyPlanTariffPeriodV2InnerDemandChargesInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEnergyPlanTariffPeriodV2InnerConstraints checks if the values respects the defined constraints
func AssertEnergyPlanTariffPeriodV2InnerConstraints(obj EnergyPlanTariffPeriodV2Inner) error {
	return nil
}
