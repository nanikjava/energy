// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyPlanTariffPeriodV2InnerDemandChargesInner struct {

	// Display name of the charge
	DisplayName string `json:"displayName"`

	// Description of the charge
	Description string `json:"description,omitempty"`

	// The charge amount per  measure unit exclusive of GST
	Amount string `json:"amount"`

	// The measurement unit of charge amount. Assumed to be KWH if absent
	MeasureUnit string `json:"measureUnit,omitempty"`

	// Start of the period.  Formatted according to [ISO 8601 Times](https://en.wikipedia.org/wiki/ISO_8601#Times). If the time is provided without a UTC offset, the time zone will be determined by the value of EnergyPlanContract.timeZone.
	StartTime string `json:"startTime"`

	// End of the period.  Formatted according to [ISO 8601 Times](https://en.wikipedia.org/wiki/ISO_8601#Times). If the time is provided without a UTC offset, the time zone will be determined by the value of EnergyPlanContract.timeZone.
	EndTime string `json:"endTime"`

	// The days that the demand tariff applies to
	Days []string `json:"days,omitempty"`

	// Minimum demand for this demand tariff in kW.  If absent then 0 is assumed
	MinDemand string `json:"minDemand,omitempty"`

	// Maximum demand for this demand tariff in kW.  If present, must be higher than the value of the minDemand field
	MaxDemand string `json:"maxDemand,omitempty"`

	// Application period for the demand tariff
	MeasurementPeriod string `json:"measurementPeriod"`

	// Charge period for the demand tariff
	ChargePeriod string `json:"chargePeriod"`
}

// AssertEnergyPlanTariffPeriodV2InnerDemandChargesInnerRequired checks if the required fields are not zero-ed
func AssertEnergyPlanTariffPeriodV2InnerDemandChargesInnerRequired(obj EnergyPlanTariffPeriodV2InnerDemandChargesInner) error {
	elements := map[string]interface{}{
		"displayName": obj.DisplayName,
		"amount": obj.Amount,
		"startTime": obj.StartTime,
		"endTime": obj.EndTime,
		"measurementPeriod": obj.MeasurementPeriod,
		"chargePeriod": obj.ChargePeriod,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyPlanTariffPeriodV2InnerDemandChargesInnerConstraints checks if the values respects the defined constraints
func AssertEnergyPlanTariffPeriodV2InnerDemandChargesInnerConstraints(obj EnergyPlanTariffPeriodV2InnerDemandChargesInner) error {
	return nil
}
