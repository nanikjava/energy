// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




type EnergyServicePointDetailRegisters struct {

	// Unique identifier of the register within this service point.  Is not globally unique
	RegisterId string `json:"registerId"`

	// Register suffix of the meter register where the meter reads are obtained
	RegisterSuffix string `json:"registerSuffix,omitempty"`

	// The energy delivered through a connection point or metering point over an extended period normalised to a 'per day' basis (kWh). This value is calculated annually.
	AveragedDailyLoad float32 `json:"averagedDailyLoad,omitempty"`

	// Indicates the consumption type of register
	RegisterConsumptionType string `json:"registerConsumptionType"`

	// The Network Tariff Code is a free text field containing a code supplied and published by the local network service provider
	NetworkTariffCode string `json:"networkTariffCode,omitempty"`

	// The unit of measure for data held in this register
	UnitOfMeasure string `json:"unitOfMeasure,omitempty"`

	// Code to identify the time validity of register contents
	TimeOfDay string `json:"timeOfDay,omitempty"`

	// Multiplier required to take a register value and turn it into a value representing billable energy
	Multiplier float32 `json:"multiplier,omitempty"`

	// Indicates whether the energy recorded by this register is created under a Controlled Load regime
	ControlledLoad bool `json:"controlledLoad,omitempty"`

	// Actual/Subtractive Indicator. Note the details of enumeration values below: <ul><li>**ACTUAL** implies volume of energy actually metered between two dates</li><li>**CUMULATIVE** indicates a meter reading for a specific date. A second Meter Reading is required to determine the consumption between those two Meter Reading dates</li></ul>
	ConsumptionType string `json:"consumptionType,omitempty"`
}

// AssertEnergyServicePointDetailRegistersRequired checks if the required fields are not zero-ed
func AssertEnergyServicePointDetailRegistersRequired(obj EnergyServicePointDetailRegisters) error {
	elements := map[string]interface{}{
		"registerId": obj.RegisterId,
		"registerConsumptionType": obj.RegisterConsumptionType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertEnergyServicePointDetailRegistersConstraints checks if the values respects the defined constraints
func AssertEnergyServicePointDetailRegistersConstraints(obj EnergyServicePointDetailRegisters) error {
	return nil
}
