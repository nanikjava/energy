// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver




// EnergyUsageReadIntervalRead - Mandatory if readUType is set to intervalRead
type EnergyUsageReadIntervalRead struct {

	// Read interval length in minutes. Required when interval-reads query parameter equals FULL or MIN_30
	ReadIntervalLength int32 `json:"readIntervalLength,omitempty"`

	// The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export
	AggregateValue float32 `json:"aggregateValue"`

	// Array of Interval read values. If positive then it means consumption, if negative it means export. Required when interval-reads query parameter equals FULL or  MIN_30.<br>Each read value indicates the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval)
	IntervalReads []float32 `json:"intervalReads,omitempty"`

	//  Specifies quality of reads that are not ACTUAL.  For read indices that are not specified, quality is assumed to be ACTUAL. If not present, all quality of all reads are assumed to be actual. Required when interval-reads query parameter equals FULL or MIN_30
	ReadQualities []EnergyUsageReadIntervalReadReadQualities `json:"readQualities,omitempty"`
}

// AssertEnergyUsageReadIntervalReadRequired checks if the required fields are not zero-ed
func AssertEnergyUsageReadIntervalReadRequired(obj EnergyUsageReadIntervalRead) error {
	elements := map[string]interface{}{
		"aggregateValue": obj.AggregateValue,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.ReadQualities {
		if err := AssertEnergyUsageReadIntervalReadReadQualitiesRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertEnergyUsageReadIntervalReadConstraints checks if the values respects the defined constraints
func AssertEnergyUsageReadIntervalReadConstraints(obj EnergyUsageReadIntervalRead) error {
	return nil
}
