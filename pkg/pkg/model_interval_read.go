// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver


import (
	"fmt"
)



type IntervalRead string

// List of IntervalRead
const (
	NONE IntervalRead = "NONE"
	MIN_30 IntervalRead = "MIN_30"
	FULL IntervalRead = "FULL"
)

// AllowedIntervalReadEnumValues is all the allowed values of IntervalRead enum
var AllowedIntervalReadEnumValues = []IntervalRead{
	"NONE",
	"MIN_30",
	"FULL",
}

// validIntervalReadEnumValue provides a map of IntervalReads for fast verification of use input
var validIntervalReadEnumValues = map[IntervalRead]struct{}{
	"NONE": {},
	"MIN_30": {},
	"FULL": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntervalRead) IsValid() bool {
	_, ok := validIntervalReadEnumValues[v]
	return ok
}

// NewIntervalReadFromValue returns a pointer to a valid IntervalRead
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntervalReadFromValue(v string) (IntervalRead, error) {
	ev := IntervalRead(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for IntervalRead: valid values are %v", v, AllowedIntervalReadEnumValues)
	}
}



// AssertIntervalReadRequired checks if the required fields are not zero-ed
func AssertIntervalReadRequired(obj IntervalRead) error {
	return nil
}

// AssertIntervalReadConstraints checks if the values respects the defined constraints
func AssertIntervalReadConstraints(obj IntervalRead) error {
	return nil
}
