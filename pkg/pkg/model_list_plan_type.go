// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver


import (
	"fmt"
)



type ListPlanType string

// List of ListPlanType
const (
	STANDING ListPlanType = "STANDING"
	MARKET ListPlanType = "MARKET"
	REGULATED ListPlanType = "REGULATED"
	ALL_LISTPLAN ListPlanType = "ALL_LISTPLAN"
)

// AllowedListPlanTypeEnumValues is all the allowed values of ListPlanType enum
var AllowedListPlanTypeEnumValues = []ListPlanType{
	"STANDING",
	"MARKET",
	"REGULATED",
	"ALL_LISTPLAN",
}

// validListPlanTypeEnumValue provides a map of ListPlanTypes for fast verification of use input
var validListPlanTypeEnumValues = map[ListPlanType]struct{}{
	"STANDING": {},
	"MARKET": {},
	"REGULATED": {},
	"ALL_LISTPLAN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListPlanType) IsValid() bool {
	_, ok := validListPlanTypeEnumValues[v]
	return ok
}

// NewListPlanTypeFromValue returns a pointer to a valid ListPlanType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListPlanTypeFromValue(v string) (ListPlanType, error) {
	ev := ListPlanType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ListPlanType: valid values are %v", v, AllowedListPlanTypeEnumValues)
	}
}



// AssertListPlanTypeRequired checks if the required fields are not zero-ed
func AssertListPlanTypeRequired(obj ListPlanType) error {
	return nil
}

// AssertListPlanTypeConstraints checks if the values respects the defined constraints
func AssertListPlanTypeConstraints(obj ListPlanType) error {
	return nil
}
