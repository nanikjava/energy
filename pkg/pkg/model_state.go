// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * CDR Energy API
 *
 * Consumer Data Right end points and payloads for the Energy sector
 *
 * API version: 1.30.0
 */

package energyserver


import (
	"fmt"
)



type State string

// List of State
const (
	ALL State = "ALL"
	CLOSED State = "CLOSED"
	OPEN State = "OPEN"
)

// AllowedStateEnumValues is all the allowed values of State enum
var AllowedStateEnumValues = []State{
	"ALL",
	"CLOSED",
	"OPEN",
}

// validStateEnumValue provides a map of States for fast verification of use input
var validStateEnumValues = map[State]struct{}{
	"ALL": {},
	"CLOSED": {},
	"OPEN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v State) IsValid() bool {
	_, ok := validStateEnumValues[v]
	return ok
}

// NewStateFromValue returns a pointer to a valid State
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStateFromValue(v string) (State, error) {
	ev := State(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for State: valid values are %v", v, AllowedStateEnumValues)
	}
}



// AssertStateRequired checks if the required fields are not zero-ed
func AssertStateRequired(obj State) error {
	return nil
}

// AssertStateConstraints checks if the values respects the defined constraints
func AssertStateConstraints(obj State) error {
	return nil
}
